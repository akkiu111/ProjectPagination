{"version":3,"sources":["components/Posts.js","components/Pagination.js","App.js","reportWebVitals.js","index.js"],"names":["Posts","posts","loading","className","map","post","title","id","Pagination","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","push","pageNumber","style","cursor","onClick","App","useState","setPosts","setLoading","currentPage","setCurrentPage","useEffect","a","axios","get","res","data","loadPosts","lastIndexOfCurrentPage","firstIndexOfCurrentPage","currentPosts","slice","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAmBeA,EAjBD,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MACZ,OADgC,EAAbC,QAER,6CAIP,oBAAIC,UAAU,kBAAd,SACKF,EAAMG,KAAI,SAAAC,GAAI,OACf,oBAAmBF,UAAU,kBAA7B,SACKE,EAAKC,OADAD,EAAKE,UCgBZC,EAxBI,SAAC,GAGlB,IAH8D,IAA1CC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SACxCC,EAAc,GAEXC,EAAI,EAAGA,GAAKC,KAAKC,KAAKL,EAAaD,GAAeI,IACzDD,EAAYI,KAAKH,GAGnB,OACE,qBAAKV,UAAU,aAAf,SACGS,EAAYR,KAAI,SAACa,GAAD,OACf,oBAAqBd,UAAU,YAA/B,SACE,qBACEe,MAAO,CAAEC,OAAQ,WACjBhB,UAAU,YACViB,QAAS,kBAAMT,EAASM,IAH1B,SAKGA,KANIA,SCmCFI,EAvCH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTrB,EADS,KACFsB,EADE,OAEcD,oBAAS,GAFvB,mBAETpB,EAFS,KAEAsB,EAFA,OAGsBF,mBAAS,GAH/B,mBAGTG,EAHS,KAGIC,EAHJ,OAIOJ,mBAAS,GAAzBb,EAJS,oBAOhBkB,qBAAU,YAEO,uCAAG,4BAAAC,EAAA,6DAClBJ,GAAW,GADO,SAEAK,IAAMC,IAAI,8CAFV,OAEZC,EAFY,OAGlBR,EAASQ,EAAIC,MACbR,GAAW,GAJO,2CAAH,qDAOfS,KAEF,IAGA,IAAMC,EAAyBT,EAAchB,EACvC0B,EAA0BD,EAAyBzB,EACnD2B,EAAenC,EAAMoC,MAAMF,EAAyBD,GAM1D,OACE,sBAAK/B,UAAU,iBAAf,UACE,oBAAIA,UAAU,oBAAd,2BACA,cAAC,EAAD,CAAOF,MAAOmC,EAAclC,QAASA,IACrC,cAAC,EAAD,CAAYO,aAAcA,EAAcC,WAAYT,EAAMqC,OAC1D3B,SARa,SAAAM,GAAU,OAAIS,EAAeT,UCtBjCsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3838496f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Posts = ({posts, loading}) => {\r\n    if(loading){\r\n       return  <h3>Loading....</h3>\r\n    }\r\n\r\n    return (\r\n        <ul className=\"list-group mb-4\">\r\n            {posts.map(post => (\r\n            <li key ={post.id} className=\"list-group-item\">\r\n                {post.title}\r\n            </li>\r\n        ))}\r\n            \r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Posts\r\n","import React from \"react\";\r\n\r\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\r\n  const pageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <nav className=\"pagination\">\r\n      {pageNumbers.map((pageNumber) => (\r\n        <li key={pageNumber} className=\"page-item\">\r\n          <div\r\n            style={{ cursor: \"pointer\" }}\r\n            className=\"page-link\"\r\n            onClick={() => paginate(pageNumber)}\r\n          >\r\n            {pageNumber}\r\n          </div>\r\n        </li>\r\n      ))}\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React, {useState, useEffect} from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport Posts from \"./components/Posts\"\nimport Pagination from './components/Pagination';\n\n//import Testing from \"./components/testing\";\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(5);\n\n  // get post data\n  useEffect(() =>{\n    \n    const loadPosts = async () => {\n    setLoading(true);\n    const res = await axios.get('https://jsonplaceholder.typicode.com/posts');\n    setPosts(res.data);\n    setLoading(false);\n    };\n\n    loadPosts();\n  }, \n  []);\n\n  // get current posts\n  const lastIndexOfCurrentPage = currentPage * postsPerPage;\n  const firstIndexOfCurrentPage = lastIndexOfCurrentPage - postsPerPage;\n  const currentPosts = posts.slice(firstIndexOfCurrentPage, lastIndexOfCurrentPage);\n  \n  // change page\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n\n  return (\n    <div className=\"container mt-5\">\n      <h1 className=\"text-primary mb-3\">My Pagination</h1>\n      <Posts posts={currentPosts} loading={loading}></Posts>\n      <Pagination postsPerPage={postsPerPage} totalPosts={posts.length}\n      paginate ={paginate}></Pagination>\n    </div>\n  );\n  };\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}